import json
import time
import google.generativeai as genai
from typing import List, Dict
from dotenv import load_dotenv
import os

load_dotenv()


genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config={
        "temperature": 0.3,
        "top_p": 1,
        "top_k": 40,
        "max_output_tokens": 999999
    }
)


def parse_chunk(index, data) -> List[Dict]:
    prompt = f"""
–¢–≤–æ—è —Ä–æ–ª—å ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –∑ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–∞ –ø—Ä–æ–¥–∞–∂—É —Å–æ–Ω—è—á–Ω–∏—Ö –ø–∞–Ω–µ–ª–µ–π.

üîß –Ø –Ω–∞–¥–∞—é —Ç–æ–±—ñ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
–ö–æ–∂–µ–Ω –æ–±'—î–∫—Ç –º—ñ—Å—Ç–∏—Ç—å –ø–æ–ª—è:
- "brand": –±—Ä–µ–Ω–¥
- "power": –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–í—Ç)
- "full_name": –ø–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞
- "price": —Ü—ñ–Ω–∞ –≤ –¥–æ–ª–∞—Ä–∞—Ö –°–®–ê
- "panel_type": —Ç–∏–ø –ø–∞–Ω–µ–ª—ñ (–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è/–¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è)
- "cell_type": —Ç–∏–ø –∫–æ–º—ñ—Ä–æ–∫ (n-type/p-type)
- "thickness": —Ç–æ–≤—â–∏–Ω–∞ (–º–º)
- "panel_color": –∫–æ–ª—ñ—Ä –ø–∞–Ω–µ–ª—ñ - "Default" –∞–±–æ "All_Black" (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "Default")
- "frame_color": –∫–æ–ª—ñ—Ä —Ä–∞–º–∫–∏ - "Silver" –∞–±–æ "Black" (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "Silver")

üéØ –ó–∞–≤–¥–∞–Ω–Ω—è:
—è–∫—â–æ –ø–æ–ª—è full_name –Ω–µ–º–∞—î —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ü—é –ø–∞–Ω–µ–ª—å —ñ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞–π —ó—ó!
—Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —è–∫—ñ —Ç–æ–±—ñ –ø—Ä–∏–π—à–ª–∏.
- —è–∫—â–æ —Ç–∏ –±–∞—á–∏—à —â–æ —Ü—ñ–Ω–∞ —î –±—ñ–ª—å—à –Ω—ñ–∂ –Ω–∞ 250% –≤—ñ–¥ —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ü—é –ø–∞–Ω–µ–ª—å, —Ç–∞–∫–æ–∂ —è–∫—â–æ —Ü—ñ–Ω–∞ —î None –∞–±–æ 0 —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ü—é –ø–∞–Ω–µ–ª—å
- —è–∫—â–æ —Ç–∏ –±–∞—á–∏—à —â–æ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å —î –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–æ—é (–±—ñ–ª—å—à–µ 800 –í—Ç) –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ—é (–º–µ–Ω—à–µ 50 –í—Ç) —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ü—é –ø–∞–Ω–µ–ª—å
- —è–∫—â–æ —Ç–∏ –±–∞—á–∏—à —â–æ —Ç–æ–≤—â–∏–Ω–∞ —î –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–æ—é (–±—ñ–ª—å—à–µ 50 –º–º) –∞–±–æ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ—é (–º–µ–Ω—à–µ 10 –º–º) —Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ü—é –ø–∞–Ω–µ–ª—å
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –ø–æ–ª–µ `full_name`, —ñ —è–∫—â–æ:
- –º–æ–∂–µ—à –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –∑ –Ω–∞–∑–≤–∏, —è–∫—â–æ –≤–æ–Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—è –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞
- —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–∂–µ—à —Ç–∞–∫–æ–∂ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∞–ª–µ –≤–æ–Ω–∏ –≤ 97% –≤–∏–ø–∞–¥–∫–∞—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ñ

‚ùóÔ∏è–£ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–µ—Ä–Ω–∏ **—Ç—ñ —Å–∞–º—ñ –æ–±'—î–∫—Ç–∏ JSON**, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ

üìå –í–∞–∂–ª–∏–≤–æ:
- ‚ùóÔ∏è–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ —á–∏—Å—Ç–∏–π JSON —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ë–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É. 
- –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ç—Ä–µ–±–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω–∏ —Ç—ñ —Å–∞–º—ñ –æ–±'—î–∫—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω.
- –¥–∞–Ω—ñ –º–∞—é—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ —Ç—ñ —Å–∞–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ —è–∫ —ñ –ø—Ä–∏–π—à–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ(—è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ)
- –¥–∞–Ω—ñ –ø–æ–≤–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ - 
- "brand": brand
- "power": power(float)
- "full_name": full_name
- "price": price(float)
- "panel_type": panel_type
- "cell_type": cell_type
- "thickness": thickness(float)
- "panel_color": panel_color
- "frame_color": frame_color


—Ç–∞–∫–æ–∂ —è–∫—â–æ –±–∞—á–∏—à —â–æ —è–∫–∏—Å—å –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤—Å—è, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–π —Ü—é –ø–∞–Ω–µ–ª—å


–û—Å—å –¥–∞–Ω—ñ:
{data}
"""

    try:
        response = model.generate_content(prompt)
        response_text = response.text.strip()

        # –û—á–∏—â–µ–Ω–Ω—è
        if response_text.startswith("```json"):
            response_text = response_text.replace("```json", "", 1)
        if response_text.endswith("```"):
            response_text = response_text.rsplit("```", 1)[0]

        parsed = json.loads(response_text)
        return parsed

    except Exception as e:
        return []


def ai_filter(data: list):
    parsed_results = []
    min_request_time = 10
    total_items = len(data)
    
    print(f"–ü–æ—á–∞—Ç–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó {total_items} —Ç–æ–≤–∞—Ä—ñ–≤")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä —á–∞—Å—Ç–∏–Ω–∏ (chunk)
    chunk_size = 50
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    for i in range(0, total_items, chunk_size):
        # –ë–µ—Ä–µ–º–æ —á–∞—Å—Ç–∏–Ω—É –¥–∞–Ω–∏—Ö (–Ω–µ –±—ñ–ª—å—à–µ chunk_size –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
        chunk = data[i:i + chunk_size]
        chunk_count = len(chunk)
        
        print(f"–û–±—Ä–æ–±–∫–∞ —á–∞—Å—Ç–∏–Ω–∏ {i//chunk_size + 1}: {chunk_count} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")
        
        if chunk_count == 0:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏
        
        start_time = time.time()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω—É –Ω–∞ –æ–±—Ä–æ–±–∫—É
        chunk_index = i // chunk_size
        print(f"chunk: {len(chunk)}")
        result = parse_chunk(chunk_index, chunk)
        print(f"result: {len(result)}")

        
        if result:
            for item in result:
                parsed_results.append(item)
            
        elapsed_time = time.time() - start_time
        
        # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –æ–±—Ä–æ–±–∫–æ—é —á–∞—Å—Ç–∏–Ω, —è–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∞
        if i + chunk_size < total_items:
            if elapsed_time < min_request_time:
                wait_time = min_request_time - elapsed_time
                print(f"‚è≥ –ß–∞—Å—Ç–∏–Ω—É –æ–±—Ä–æ–±–ª–µ–Ω–æ –∑–∞ {elapsed_time:.1f} —Å–µ–∫. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {wait_time:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —á–∞—Å—Ç–∏–Ω–æ—é...")
                time.sleep(wait_time)
    
    print(f"‚úÖ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–Ω–∞–π–¥–µ–Ω–æ {len(parsed_results)} —Ç–æ–≤–∞—Ä—ñ–≤")
    return parsed_results