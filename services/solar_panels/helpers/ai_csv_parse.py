import csv
import json
import google.generativeai as genai
from dotenv import load_dotenv
import os

load_dotenv()


def ai_parser(csv_path: str, comment: str | None, chunk_size: int = 50):
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—É –º–æ–¥–µ–ª—å gemini-1.5-flash –∞–±–æ gemini-pro
    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config={
            "temperature": 0.3,
            "top_p": 1,
            "top_k": 40,
            "max_output_tokens": 999999
        }
    )
    results = []

    with open(csv_path, newline='', encoding='utf-8') as f:
        reader = csv.reader(f)
        headers = next(reader)
        rows = list(reader)
    

        for i in range(0, len(rows), chunk_size):
            chunk = rows[i:i + chunk_size]

            # –§–æ—Ä–º—É—î–º–æ CSV-—Ä—è–¥–æ–∫
            csv_chunk = [headers] + chunk
            csv_text = '\n'.join([','.join(row) for row in csv_chunk])

            prompt = f"""
–î—ñ—è–π —è–∫ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –ø–∞—Ä—Å–µ—Ä —ñ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –∑ –ø—Ä–æ–¥–∞–∂—É —Å–æ–Ω—è—á–Ω–∏—Ö –ø–∞–Ω–µ–ª–µ–π.

–ó —Ü—å–æ–≥–æ CSV-—Ñ—Ä–∞–≥–º–µ–Ω—Ç—É –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Å–æ–Ω—è—á–Ω—ñ –ø–∞–Ω–µ–ª—ñ —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏ —ó—Ö —É –º–∞—Å–∏–≤ JSON –æ–±'—î–∫—Ç—ñ–≤ —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:
{{
  "brand": brand,
  "power": power,
  "full_name": full_name,
  "price": price,
  "panel_type": panel_type,
  "cell_type": cell_type,
  "thickness": thickness
}}

üìå –î–µ—Ç–∞–ª—ñ –ø–∞—Ä—Å–∏–Ω–≥—É:
- 'brand': –ø–æ–≤–µ—Ä–Ω–∏ –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º
- `price`: —Ü—ñ–Ω–∞ –≤ –¥–æ–ª–∞—Ä–∞—Ö –°–®–ê, —Ü—ñ–Ω–∞ –∑–∞–≤–∂–¥–∏ –º–∞—î –±—É—Ç–∏ (—è–∫—â–æ –Ω–µ–º–∞—î —Ç–æ None) –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑ —Ä—è–¥–∫–∞ —è–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è —î –Ω–∞–π–±–ª–∏–∂—á–∏–º
- `power`: –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å —É –í–∞—Ç–∞—Ö (–í—Ç/W), —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –Ω—ñ—è–∫–∏—Ö –±—É–∫–≤ —Ç–æ –ø–æ–¥—É–º–∞–π –ª–æ–≥—ñ—á–Ω–æ —è–∫–µ –∑ —Ü–∏—Ö –∑–Ω–∞—á–µ–Ω—å –Ω–∞–π–±—ñ–ª—å—à –Ω–∞–±–ª–∏–∂–µ–Ω–µ —ñ —Ä–µ–∞–ª—å–Ω–µ –¥–æ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ
- `panel_type`: —Ç–∏–ø –ø–∞–Ω–µ–ª—ñ - "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è" –∞–±–æ "–¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è" (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è")
- `cell_type`: —Ç–∏–ø –∫–æ–º—ñ—Ä–æ–∫ - "n-type" –∞–±–æ "p-type" (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º "n-type")
- `thickness`: —Ç–æ–≤—â–∏–Ω–∞ –≤ –º—ñ–ª—ñ–º–µ—Ç—Ä–∞—Ö (–º–º) (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 30)
- `full_name`: –ø–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ —Å–æ–Ω—è—á–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ

{comment if comment else ""}

–û—Å—å CSV-–¥–∞–Ω—ñ:
{csv_text}

‚ùóÔ∏è–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ —á–∏—Å—Ç–∏–π JSON —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ë–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
"""

            try:
                response = model.generate_content(prompt)
                response_text = response.text
                
                # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Å–∏–º–≤–æ–ª–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –∑–∞–≤–∞–∂–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥—É JSON
                response_text = response_text.strip()
                if response_text.startswith("```json"):
                    response_text = response_text.replace("```json", "", 1)
                if response_text.endswith("```"):
                    response_text = response_text.rsplit("```", 1)[0]
                response_text = response_text.strip()
                
                # –ü–∞—Ä—Å–∏–º–æ JSON
                json_data = json.loads(response_text)
                results.extend(json_data)
                print(f"–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –±–ª–æ–∫ {i}-{i + len(chunk)}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(json_data)} —Å–æ–Ω—è—á–Ω–∏—Ö –ø–∞–Ω–µ–ª–µ–π")
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞ –±–ª–æ—Ü—ñ {i}-{i + chunk_size}: {e}")
                print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å API: {response.text if 'response' in locals() else '–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ'}")
                continue

    return results
